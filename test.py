# Пример 1
# squared — генераторное выражение, создает объект-итератор, который будет вычислять квадраты чисел по мере необходимости.
# # При первом вызове list(squared), итератор начинает свою работу и проходит через все элементы в numbers,
# вычисляя их квадраты. Результат будет [1, 4, 9, 16, 25].
# При втором вызове list(squared_numbers) итератор уже исчерпан.
# Генераторы в Python могут быть использованы только один раз.
# После того как все элементы были извлечены из генератора, он не может быть использован повторно.
# Поэтому второй вызов возвращает пустой список [].

numbers = [1,2,3,4,5]

squared = (n**2 for n in numbers)

print(list(squared))

print(list(squared))

# Пример 2
n = iter([43, True, "hello "])
print(next(n))
print(next(n))
print(next(n))
#Если расскоментировать строку ниже, получим ошибку StopIteration
#print(next(n))

# Пример 3
my_list = [1, 2, 3, 4, 5]
# Функция iter() используется для создания итератора из списка my_list.
# Итератор — это объект, который позволяет вам перебирать элементы коллекции
# (в данном случае списка) по одному за раз.
# Итератор хранит текущее состояние (текущий элемент), что позволяет продолжать итерацию с того места,
# где она была остановлена.
my_iterator = iter(my_list)

for item in my_iterator:
    print(item)
